---
import BaseLayout from "../../layouts/BaseLayout.astro";
import BlogPost from "../../components/BlogPost.astro";
import ContentCard from "../../components/ContentCard.astro";

let allPosts = await Astro.glob("./*.md");

// pubDate の降順ソート
allPosts = allPosts.sort((a, b) => {
  const dateA = new Date(a.frontmatter.pubDate as string).getTime();
  const dateB = new Date(b.frontmatter.pubDate as string).getTime();
  return dateB - dateA; // 新しい日付が先
});
const pageTitle = "Contents";
---

<BaseLayout pageTitle={pageTitle}>
  <div slot="aboveContent">
    <div class="filter-description">
      <p>
        各コンテンツをタップ・クリックすることで、コンテンツの詳細や<br
        />制作に携わったクリエイターを見ることができます。
      </p>
    </div>
    <div class="filter-buttons">
      <button data-tag="all" class="filter-btn active">All</button>
      <button data-tag="Event" class="filter-btn">Event</button>
      <button data-tag="Goods" class="filter-btn">Goods</button>
      <button data-tag="Web" class="filter-btn">Web</button>
      <!-- <button data-tag="Others" class="filter-btn">Others</button> -->
    </div>
  </div>
  <div class="contents-main">
    <div class="contents-container">
      {
        allPosts.map((post) => (
          <ContentCard
            title={post.frontmatter.title}
            image={post.frontmatter.image}
            subtitle={post.frontmatter.subtitle}
            description={post.frontmatter.description}
            eventTag={post.frontmatter.eventTag}
            date={post.frontmatter.date}
            pageUrl={post.url}
          />
        ))
      }
    </div>
  </div>
</BaseLayout>
<style>
  .contents-main {
    display: flex;
    justify-content: center; /* 全体を中央寄せ */
  }

  /* ページ側: コンテナを中央に固定しグリッド化 */
  .contents-container {
    display: grid;
    grid-template-columns: repeat(2, minmax(280px, 1fr));
    gap: 1rem;
    max-width: 800px;
    width: 100%;
    padding-inline: 1rem;
    margin: 1rem auto;
    box-sizing: border-box;
    justify-content: center; /* 余白を左右均等 */
    justify-items: stretch; /* アイテムは列幅いっぱい */
  }
  @media (max-width: 635px) {
    .contents-container {
      grid-template-columns: 1fr;
    }
  }

  /* カード幅を明示 */
  .content-card {
    width: 100%;
    margin: 0;
  }
  /* フィルター説明文 */
  .filter-description {
    color: var(--white);
    text-align: center;
    font-size: clamp(0.6rem, 2vw, 1.1rem);
    max-width: 800px;
    margin: 0 auto;
  }
  /* ボタンスタイル追加 */
  .filter-buttons {
    display: flex;
    gap: 0.5rem;
    margin: 1rem 0;
    justify-content: center; /* ボタンを中央寄せ */
  }
  .filter-btn {
    border: 2px solid var(--white);
    background: transparent;
    color: var(--white);
    border-radius: 999px;
    padding: min(1vw, 0.3rem) min(3vw, 1rem);
    cursor: pointer;
    font-size: min(3vw, 1.2rem);
    transition:
      background 0.2s,
      color 0.2s;
  }
  .filter-btn.active,
  .filter-btn:hover {
    background: var(--white);
    color: var(--text);
  }
</style>
<script is:inline>
  // フィルターのロジックを関数化する
  function initFilterLogic() {
    const buttons = document.querySelectorAll(".filter-btn");
    const cards = document.querySelectorAll(".content-card");

    // ボタンやカードが存在しないページでは何もしない
    if (buttons.length === 0 || cards.length === 0) {
      return;
    }

    buttons.forEach((btn) => {
      // 古いイベントリスナーが残っている可能性を考慮し、一度クローンして置き換える
      const newBtn = btn.cloneNode(true);
      btn.parentNode.replaceChild(newBtn, btn);

      newBtn.addEventListener("click", () => {
        // activeクラスの付け替えは、新しいボタンの集合に対して行う
        document
          .querySelectorAll(".filter-btn")
          .forEach((b) => b.classList.remove("active"));
        newBtn.classList.add("active");

        const tag = newBtn.getAttribute("data-tag");
        document.querySelectorAll(".content-card").forEach((card) => {
          const cardTag = card.getAttribute("data-tag");
          card.style.display = tag === "all" || tag === cardTag ? "" : "none";
        });
      });
    });
    // 初期状態でアクティブなボタンを再設定
    const initialActiveButton = document.querySelector(
      '.filter-btn[data-tag="all"]',
    );
    if (initialActiveButton) {
      initialActiveButton.classList.add("active");
    }
  }

  // 1. 初回ロード時に実行
  initFilterLogic();

  // 2. ページ遷移後にも実行
  document.addEventListener("astro:after-swap", initFilterLogic);
</script>
