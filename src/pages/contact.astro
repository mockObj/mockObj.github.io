---
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout pageTitle="Contact">
  <form
    class="form"
    id="form"
    action="https://ssgform.com/s/Qm12VHOkWAd6"
    method="post"
    novalidate
  >
    <div class="form__cont">
      <label class="form__label" for="name"
        >お名前 <span class="form__required">必須</span></label
      >
      <div class="form__contInner">
        <input
          class="form__text"
          type="text"
          id="name"
          name="name"
          placeholder="山田 太郎"
          aria-required="true"
          required
        />
      </div>
    </div>

    <div class="form__cont">
      <label class="form__label" for="email"
        >メールアドレス <span class="form__required">必須</span></label
      >
      <div class="form__contInner">
        <input
          class="form__text"
          type="email"
          autocomplete="email"
          id="email"
          name="email"
          placeholder="taro@example.com"
          aria-required="true"
          required
        />
        <span class="form__errorMessage text-red-500 text-xs"></span>
      </div>
    </div>

    <div class="form__cont">
      <label class="form__label" for="message"
        >お問い合わせ内容 <span class="form__required">必須</span></label
      >
      <div class="form__contInner">
        <textarea
          class="form__textarea"
          id="message"
          name="message"
          cols="30"
          rows="10"
          placeholder="お問い合わせ内容をご記入ください"
          aria-required="true"
          required></textarea>
      </div>
    </div>

    <!-- v2 Checkbox。コールバックでボタン有効化を更新 -->
    <!-- https://www.suzunatsu.com/post/astro-ssgform-recaptcha/   参考 -->
    <div
      class="g-recaptcha mt-4 flex justify-center"
      data-sitekey="6LeFsakrAAAAACpGBmzZBagYuJn9EmtMepLH0vQW"
      data-size="compact"
      data-callback="onRecaptcha"
      data-expired-callback="onRecaptchaExpired"
    >
    </div>

    <button type="submit" class="form__btn is-disabled" disabled
      >送信する</button
    >
  </form>
</BaseLayout>

<script>
  (() => {
    // reCAPTCHAを必要なときだけ読み込む
    const ensureRecaptcha = () =>
      new Promise((resolve) => {
        if (window.grecaptcha) return resolve();
        const s = document.createElement("script");
        s.src = "https://www.google.com/recaptcha/api.js?render=explicit";
        s.async = true;
        s.defer = true;
        s.onload = () => resolve();
        document.head.appendChild(s);
      });

    // Contactページ専用初期化
    function initContact() {
      const form = document.querySelector("form#form");
      if (!form || form.dataset.initialized === "1") return;

      const formBtn = form.querySelector(".form__btn");
      const person = form.querySelector("#name");
      const email = form.querySelector("#email");
      const message = form.querySelector("#message");
      const errorMessage = form.querySelector(".form__errorMessage");
      const recaptchaEl = form.querySelector(".g-recaptcha");

      let recaptchaOK = false;

      function resetValidation() {
        email.setCustomValidity("");
        email.classList.remove("is-invalid");
        if (errorMessage) errorMessage.textContent = "";
      }
      function validateEmail() {
        resetValidation();
        if (email.value.trim() === "") return false;
        if (email.validity.typeMismatch) {
          email.setCustomValidity("正しいメールアドレスを入力してください");
          email.classList.add("is-invalid");
          if (errorMessage) errorMessage.textContent = email.validationMessage;
          return false;
        }
        return email.checkValidity();
      }
      function validateForm() {
        const isFilled =
          person.value.trim() !== "" &&
          email.value.trim() !== "" &&
          message.value.trim() !== "";
        const ok = isFilled && validateEmail() && recaptchaOK;
        formBtn.classList.toggle("is-disabled", !ok);
        formBtn.disabled = !ok;
      }

      person.addEventListener("input", validateForm);
      email.addEventListener("input", validateForm);
      message.addEventListener("input", validateForm);

      // reCAPTCHAコールバックをグローバルに1回だけ定義
      if (!window.onRecaptcha) {
        window.onRecaptcha = () => {
          recaptchaOK = true;
          validateForm();
        };
      }
      if (!window.onRecaptchaExpired) {
        window.onRecaptchaExpired = () => {
          recaptchaOK = false;
          validateForm();
        };
      }

      // reCAPTCHAを明示レンダリング（遷移後も毎回動く）
      if (recaptchaEl) {
        ensureRecaptcha().then(() => {
          if (!recaptchaEl.dataset.widgetId && window.grecaptcha) {
            const widgetId = window.grecaptcha.render(recaptchaEl, {
              sitekey: recaptchaEl.dataset.sitekey,
              size: recaptchaEl.dataset.size || "compact",
              callback: window.onRecaptcha,
              "expired-callback": window.onRecaptchaExpired,
            });
            recaptchaEl.dataset.widgetId = String(widgetId);
          }
        });
      }

      validateForm();
      form.dataset.initialized = "1";
    }

    // すべてのページ遷移で再初期化
    const run = () => {
      initContact();
    };
    addEventListener("astro:page-load", run);
    addEventListener("astro:after-swap", run);

    // フルリロード時の保険
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", run, { once: true });
    } else {
      run();
    }
  })();
</script>

<style>
  /* .form {
    margin: 0 auto;
    max-width: 600px;
  }
  .form__cont {
    margin: 0 auto;
    margin-bottom: 1rem;
  } */

  /* コンテナを中央に配置し、内部は左揃え */
  .contact {
    margin: 4rem auto; /* 上下の余白 ＋ 中央揃え */
  }
  .contact__title {
    margin: 0 0 1rem;
    font-size: 1.5rem;
    text-align: left; /* タイトル左揃え */
  }

  /* フォームカード */
  .form {
    display: grid;
    gap: 1rem; /* 各要素の間隔 */
    padding: 1.5rem;
    text-align: left; /* 内部左揃え */
  }

  .form__cont {
    display: grid;
    gap: 0.5rem;
  }
  .form__text,
  .form__textarea {
    width: 100%;
  }

  .g-recaptcha {
    margin-top: 0.5rem;
  } /* 左揃えのまま */

  .form__btn {
    margin-top: 0.5rem;
    padding: 0.8rem 1.2rem;
    border-radius: 999px; /* ピル形 */
  }

  .form__required {
    font-size: 0.875rem;
    color: red;
  }

  /* お好みでエラー表示の見た目を簡単に */
  .is-invalid {
    outline: 2px solid #f87171;
  }
  /* フォームは画面幅内に収める */
  .form {
    max-width: 640px;
    width: 100%;
    margin: 0 auto;
    box-sizing: border-box;
  }

  /* グリッド子を縮め可にして横はみ出し防止 */
  .form__contInner {
    min-width: 0;
  }

  /* 入力要素は親幅を超えない */
  .form__text,
  .form__textarea {
    max-width: 100%;
    box-sizing: border-box;
  }

  /* 極小幅でのパディング圧縮（必要最小） */
  @media (max-width: 360px) {
    .form {
      padding-inline: 0.75rem;
    }
  }
</style>
