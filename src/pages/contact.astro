---
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout pageTitle="Contact">
  <form
    class="form"
    id="form"
    action="https://ssgform.com/s/Qm12VHOkWAd6"
    method="post"
    novalidate
  >
    <div class="form__cont">
      <label class="form__label" for="name"
        >お名前 <span class="form__required">必須</span></label
      >
      <div class="form__contInner">
        <input
          class="form__text"
          type="text"
          id="name"
          name="name"
          placeholder="山田 太郎"
          aria-required="true"
          required
        />
      </div>
    </div>

    <div class="form__cont">
      <label class="form__label" for="email"
        >メールアドレス <span class="form__required">必須</span></label
      >
      <div class="form__contInner">
        <input
          class="form__text"
          type="email"
          autocomplete="email"
          id="email"
          name="email"
          placeholder="taro@example.com"
          aria-required="true"
          required
        />
        <span class="form__errorMessage text-red-500 text-xs"></span>
      </div>
    </div>

    <div class="form__cont">
      <label class="form__label" for="message"
        >お問い合わせ内容 <span class="form__required">必須</span></label
      >
      <div class="form__contInner">
        <textarea
          class="form__textarea"
          id="message"
          name="message"
          cols="30"
          rows="10"
          placeholder="お問い合わせ内容をご記入ください"
          aria-required="true"
          required></textarea>
      </div>
    </div>

    <!-- v2 Checkbox。コールバックでボタン有効化を更新 -->
    <!-- https://www.suzunatsu.com/post/astro-ssgform-recaptcha/   参考 -->

    <div
      class="g-recaptcha mt-4 flex justify-center"
      data-sitekey="6LeFsakrAAAAACpGBmzZBagYuJn9EmtMepLH0vQW"
      data-size="compact"
      data-callback="onRecaptcha"
      data-expired-callback="onRecaptchaExpired"
    >
    </div>

    <button type="submit" class="form__btn is-disabled" disabled
      >送信する</button
    >
  </form>
</BaseLayout>

<script>
  // --- reCAPTCHAのAPI読み込みを管理する部分 ---
  let resolveRecaptchaPromise;
  const recaptchaReadyPromise = new Promise((resolve) => {
    resolveRecaptchaPromise = resolve;
  });

  // Googleのスクリプトが読み込み完了した際に、このグローバル関数を呼び出す
  window.onRecaptchaApiReady = () => {
    if (window.grecaptcha && window.grecaptcha.render) {
      resolveRecaptchaPromise();
    }
  };

  const ensureRecaptcha = () => {
    // スクリプトタグがまだページに存在しない場合のみ、一度だけ挿入する
    if (
      !document.querySelector(
        'script[src^="https://www.google.com/recaptcha/api.js"]',
      )
    ) {
      const s = document.createElement("script");
      // Google公式のonloadパラメータを使い、読み込み完了時にonRecaptchaApiReadyを呼ぶ
      s.src =
        "https://www.google.com/recaptcha/api.js?onload=onRecaptchaApiReady&render=explicit";
      s.async = true;
      s.defer = true;
      document.head.appendChild(s);
    }
    // API準備完了を待つPromiseを返す
    return recaptchaReadyPromise;
  };

  // --- フォームの初期化とバリデーションロジック ---

  // ウィジェット用のコールバックをグローバルに用意
  window.onRecaptcha = () => {};
  window.onRecaptchaExpired = () => {};

  function initContact() {
    const form = document.querySelector("form#form");
    if (!form || form.dataset.initialized === "true") return;
    form.dataset.initialized = "true";

    const formBtn = form.querySelector(".form__btn");
    const person = form.querySelector("#name");
    const email = form.querySelector("#email");
    const message = form.querySelector("#message");
    const errorMessage = form.querySelector(".form__errorMessage");
    const recaptchaEl = form.querySelector(".g-recaptcha");
    let recaptchaOK = false;

    const resetValidation = () => {
      email.setCustomValidity("");
      email.classList.remove("is-invalid");
      if (errorMessage) errorMessage.textContent = "";
    };

    const validateEmail = () => {
      resetValidation();
      if (email.value.trim() === "") return false;
      if (email.validity.typeMismatch) {
        email.setCustomValidity("正しいメールアドレスを入力してください");
        email.classList.add("is-invalid");
        if (errorMessage) errorMessage.textContent = email.validationMessage;
        return false;
      }
      return email.checkValidity();
    };

    const validateForm = () => {
      const isFilled =
        person.value.trim() !== "" &&
        email.value.trim() !== "" &&
        message.value.trim() !== "";
      const ok = isFilled && validateEmail() && recaptchaOK;
      formBtn.classList.toggle("is-disabled", !ok);
      formBtn.disabled = !ok;
    };

    person.addEventListener("input", validateForm);
    email.addEventListener("input", validateForm);
    message.addEventListener("input", validateForm);

    window.onRecaptcha = () => {
      recaptchaOK = true;
      validateForm();
    };

    window.onRecaptchaExpired = () => {
      if (window.grecaptcha) {
        window.grecaptcha.reset();
      }
      recaptchaOK = false;
      validateForm();
    };

    if (recaptchaEl) {
      ensureRecaptcha().then(() => {
        if (recaptchaEl.innerHTML !== "") {
          recaptchaEl.innerHTML = "";
        }
        window.grecaptcha.render(recaptchaEl, {
          sitekey: recaptchaEl.dataset.sitekey,
          size: window.innerWidth <= 400 ? "compact" : "normal",
          callback: window.onRecaptcha,
          "expired-callback": window.onRecaptchaExpired,
        });
      });
    }

    validateForm();
  }

  // AstroのView Transition環境では、このイベントリスナー１つで
  // 通常のリロードとページ遷移の両方に対応するのが最もシンプルで確実です。
  document.addEventListener("astro:page-load", initContact);
</script>

<style>
  /* コンテナを中央に配置し、内部は左揃え */
  .contact {
    margin: 4rem auto; /* 上下の余白 ＋ 中央揃え */
  }
  .contact__title {
    margin: 0 0 1rem;
    font-size: 1.5rem;
    text-align: left; /* タイトル左揃え */
    font-weight: 200;
  }

  /* フォームカード */
  .form {
    display: grid;
    gap: 1rem; /* 各要素の間隔 */
    padding: 1.5rem;
    text-align: left; /* 内部左揃え */
    max-width: 640px;
    width: 100%;
    margin: 0 auto;
    box-sizing: border-box;
  }

  .form__cont {
    display: grid;
    gap: 0.5rem;
  }
  .form__contInner {
    min-width: 0; /* グリッド子を縮め可にして横はみ出し防止 */
  }

  .form__text,
  .form__textarea {
    width: 100%;
    max-width: 100%;
    padding: 0.9rem 1rem; /* 高さを出す */
    font-size: 1rem;
    font-weight: 300; /* 入力文字を細字 */
    border: 1px solid #ccc;
    border-radius: 6px;
    box-sizing: border-box;
  }

  /* プレースホルダー */
  .form__text::placeholder,
  .form__textarea::placeholder {
    font-weight: 300;
    color: #aaa;
  }

  /* reCAPTCHA */
  .g-recaptcha {
    margin-top: 0.5rem;
  }

  /* ボタン */
  .form__btn {
    margin-top: 0.5rem;
    padding: 0.8rem 2.4rem;
    border-radius: 999px; /* ピル形 */
    display: inline-block;
    width: auto;
    justify-self: center;
  }

  /* 必須ラベル */
  .form__required {
    font-size: 0.875rem;
    color: red;
  }

  /* エラー表示 */
  .is-invalid {
    outline: 2px solid #f87171;
  }

  /* 極小幅でのパディング圧縮 */
  @media (max-width: 360px) {
    .form {
      padding-inline: 0.75rem;
    }
  }
</style>
