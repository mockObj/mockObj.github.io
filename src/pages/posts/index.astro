---
import BaseLayout from "../../layouts/BaseLayout.astro";
import BlogPost from "../../components/BlogPost.astro";
import ContentCard from "../../components/ContentCard.astro";

let allPosts = await Astro.glob("./*.md");

// pubDate の降順ソート
allPosts = allPosts.sort((a, b) => {
  const dateA = new Date(a.frontmatter.pubDate as string).getTime();
  const dateB = new Date(b.frontmatter.pubDate as string).getTime();
  return dateB - dateA; // 新しい日付が先
});
const pageTitle = "Contents";
---

<BaseLayout pageTitle={pageTitle}>
  <div slot="aboveContent" class="filter-buttons">
    <button data-tag="all" class="filter-btn active">All</button>
    <button data-tag="Event" class="filter-btn">Event</button>
    <button data-tag="Goods" class="filter-btn">Goods</button>
    <button data-tag="Web" class="filter-btn">Web</button>
    <!-- <button data-tag="Others" class="filter-btn">Others</button> -->
  </div>
  <div class="contents-main">
    <div class="contents-container">
      {
        allPosts.map((post) => (
          <ContentCard
            title={post.frontmatter.title}
            image={post.frontmatter.image}
            subtitle={post.frontmatter.subtitle}
            description={post.frontmatter.description}
            eventTag={post.frontmatter.eventTag}
            date={post.frontmatter.date}
            pageUrl={post.url}
            data-tag={post.frontmatter.eventTag}
          />
        ))
      }
    </div>
  </div>
</BaseLayout>
<style>
  .contents-main {
    display: flex;
    justify-content: center; /* 全体を中央寄せ */
  }

  /* ページ側: コンテナを中央に固定しグリッド化 */
  .contents-container {
    display: grid;
    grid-template-columns: repeat(2, minmax(280px, 1fr));
    gap: 1rem;
    max-width: 800px;
    width: 100%;
    padding-inline: 1rem;
    margin: 1rem auto;
    box-sizing: border-box;
    justify-content: center; /* 余白を左右均等 */
    justify-items: stretch; /* アイテムは列幅いっぱい */
  }
  @media (max-width: 635px) {
    .contents-container {
      grid-template-columns: 1fr;
    }
  }

  /* カード幅を明示 */
  .content-card {
    width: 100%;
    margin: 0;
  }
  /* ボタンスタイル追加 */
  .filter-buttons {
    display: flex;
    gap: 0.5rem;
    margin: 1rem 0;
    justify-content: center; /* ボタンを中央寄せ */
  }
  .filter-btn {
    border: 2px solid var(--white);
    background: transparent;
    color: var(--white);
    border-radius: 999px;
    padding: min(1vw, 0.3rem) min(3vw, 1rem);
    cursor: pointer;
    font-size: min(3vw, 1.2rem);
    transition:
      background 0.2s,
      color 0.2s;
  }
  .filter-btn.active,
  .filter-btn:hover {
    background: var(--white);
    color: var(--text);
  }
</style>
<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const buttons = document.querySelectorAll(".filter-btn");
    const cards = document.querySelectorAll(".content-card");

    buttons.forEach((btn) => {
      btn.addEventListener("click", () => {
        buttons.forEach((b) => b.classList.remove("active"));
        btn.classList.add("active");

        const tag = btn.getAttribute("data-tag");
        cards.forEach((card) => {
          const cardTag = card.getAttribute("data-tag");
          card.style.display =
            tag === "all" || tag === cardTag ? "block" : "none";
        });
      });
    });
  });
</script>
